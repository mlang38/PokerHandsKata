<?php

namespace FTH\Katas\PokerHands\Tests;

use FTH\Katas\PokerHands\PokerHandsComparator;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-05 at 09:22:15.
 */
class PokerHandsComparatorTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var PokerHandsComparator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PokerHandsComparator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers FTH\Katas\PokerHands\PokerHandsComparator::whoWins
     */
    public function test_WhoWins_invalidInputThrowsParseException()
    {
        // Wrong number of cards
        $ok = false;
        try {
            $this->object->whoWins('Black: 2H 3D 5S 9C KD KC White: 2C 3H 4S 8C AH');
        } catch (\InvalidArgumentException $exc) {
            $ok = true;
        }
        $this->assertTrue($ok, 'Wrong number of cards');

        // Wrong value
        $ok = false;
        try {
            $this->object->whoWins('Black: 2H 3D 0D 9C KD White: 2C 3H 4S 8C AH');
        } catch (\InvalidArgumentException $exc) {
            $ok = true;
        }
        $this->assertTrue($ok, 'Wrong value');

        // Wrong suit
        $ok = false;
        try {
            $this->object->whoWins('Black: 2H 3D JX 9C KD White: 2C 3H 4S 8C AH');
        } catch (\InvalidArgumentException $exc) {
            $ok = true;
        }
        $this->assertTrue($ok, 'Wrong suit');

        // Duplicate card
        $ok = false;
        try {
            $this->object->whoWins('Black: 2H 3D 5S 9C KD White: 2H 3H 4S 8C AH');
        } catch (\InvalidArgumentException $exc) {
            $ok = true;
        }
        $this->assertTrue($ok, 'Duplicate card');
    }

    /**
     * @covers FTH\Katas\PokerHands\PokerHandsComparator::whoWins
     */
    public function test_WhoWins_HighestCardWins()
    {
        $pokerHands = 'Black: 2H 3D 5S 9C KD White: 2C 3H 4S 8C AH';
        $this->assertSame('White wins - high card : AH', $this->object->whoWins($pokerHands), 'AH wins');

        $pokerHands = 'Black: 2H 3D 5S AC KD White: 2C 3H 4S 8C AH';
        $this->assertSame('Black wins - high card : KD', $this->object->whoWins($pokerHands), 'KD wins');
    }

    /**
     * @covers FTH\Katas\PokerHands\PokerHandsComparator::whoWins
     */
    public function test_WhoWins_HighestPairWins()
    {
        $this->markTestIncomplete();
    }

}
